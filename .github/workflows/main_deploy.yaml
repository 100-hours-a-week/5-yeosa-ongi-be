name: Deploy PROD Backend on PR Merge

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:
    inputs:
      version_type:
        description: '버전 증가 유형 (major, feature, fix)'
        required: true
        type: choice
        options:
          - major
          - feature
          - fix

jobs:
  deploy:
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git Identity
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

      - name: Determine Version Type
        id: version_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            echo "type=fix" >> $GITHUB_OUTPUT
          fi

      - name: Read and Bump Version
        id: bump
        env:
          VERSION_TYPE: ${{ steps.version_type.outputs.type }}
        run: |
          set -e

          echo "🔎 현재 브랜치 버전 관리 시작"

          # 파일 없으면 초기화
          if [ ! -f version.txt ]; then
            echo "version.txt not found, initializing to 1.0.0"
            echo "1.0.0" > version.txt
          fi

          VERSION=$(cat version.txt)

          # 형식 확인
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid version format: $VERSION"
            exit 1
          fi

          IFS='.' read -r MAJOR FEATURE FIX <<< "$VERSION"

          case "$VERSION_TYPE" in
            major)
              ((MAJOR++)); FEATURE=0; FIX=0 ;;
            feature)
              ((FEATURE++)); FIX=0 ;;
            fix)
              ((FIX++)) ;;
            *)
              echo "::error::Invalid version type: $VERSION_TYPE"
              exit 1 ;;
          esac

          NEW_VERSION="${MAJOR}.${FEATURE}.${FIX}"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "$NEW_VERSION" > version.txt

      - name: Commit and Push version.txt and Git Tag
        run: |
          git add version.txt
          git commit -m "🔖 Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag "v${{ steps.bump.outputs.new_version }}"
          git push origin main --tags

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier

      - name: Configure Docker Auth
        run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev --quiet

      - name: Build & Push Docker Image
        run: |
          docker build -t asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/prod-ongi-spring-repo/backend:${{ steps.bump.outputs.new_version }} .
          docker push asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/prod-ongi-spring-repo/backend:${{ steps.bump.outputs.new_version }}

      - name: Trigger Cloud Build (PROD)
        run: |
          gcloud builds submit . \
            --config=.gcp/cloudbuild-prod.yaml \
            --substitutions=_IMAGE_TAG=${{ steps.bump.outputs.new_version }},_TEMPLATE_NAME=ongi-prod-${{ steps.bump.outputs.new_version }} \
            --service-account=projects/dev-ongi-3-tier/serviceAccounts/github-cd-builder@dev-ongi-3-tier.iam.gserviceaccount.com

      - name: Notify Discord on Success
        if: success()
        env:
          VERSION: ${{ steps.bump.outputs.new_version }}
        run: |
          TITLE="${{ github.event_name == 'workflow_dispatch' && '📦 수동 배포' || '🔁 PR 병합 자동 배포' }}"
          URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo '{
            "content": "**✅ PROD 백엔드 배포 완료!**",
            "embeds": [
              {
                "title": "'"$TITLE"'",
                "url": "'"$URL"'",
                "fields": [
                  { "name": "Repository", "value": "'"${{ github.repository }}"'", "inline": true },
                  { "name": "Actor", "value": "'"${{ github.actor }}"'", "inline": true },
                  { "name": "Image Tag", "value": "'"$VERSION"'", "inline": true }
                ],
                "color": 3066993
              }
            ]
          }' | curl -H "Content-Type: application/json" -X POST -d @- ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          TITLE="${{ github.event_name == 'workflow_dispatch' && '📦 수동 배포' || '🔁 PR 병합 자동 배포' }}"
          URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          echo '{
            "content": "**❌ PROD 백엔드 배포 실패!**",
            "embeds": [
              {
                "title": "'"$TITLE"'",
                "url": "'"$URL"'",
                "fields": [
                  { "name": "Repository", "value": "'"${{ github.repository }}"'", "inline": true },
                  { "name": "Actor", "value": "'"${{ github.actor }}"'", "inline": true }
                ],
                "color": 15158332
              }
            ]
          }' | curl -H "Content-Type: application/json" -X POST -d @- ${{ secrets.DISCORD_WEBHOOK_URL }}
