name: Deploy PROD Backend on PR Merge

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  flyway-migration:
    runs-on: [ self-hosted, linux, x64, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier

      - name: Fetch DB credentials (PROD)
        id: fetch-secrets
        run: |
          # 1) Secret Manager에서 URL·계정·비밀번호 가져오기
          DB_URL=$(gcloud secrets versions access latest --secret=db_url_prod)
          DB_USER=$(gcloud secrets versions access latest --secret=db_user_prod)
          DB_PASS=$(gcloud secrets versions access latest --secret=db_password_prod)
          
          # 2) URL에 옵션 추가
          DB_URL="${DB_URL}?allowPublicKeyRetrieval=true&useSSL=false"
          
          # 3) 모두 마스킹
          echo "::add-mask::$DB_URL"
          echo "::add-mask::$DB_USER"
          echo "::add-mask::$DB_PASS"
          
          # 4) 환경 변수로 내보내기
          echo "DB_URL=$DB_URL"  >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASS=$DB_PASS" >> $GITHUB_ENV

      - name: Download & Install Flyway CLI locally
        run: |
          # 1) 기존 설치 제거 (있으면)
          rm -rf ~/.local/share/flyway
          # 2) 압축 해제
          curl -L https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.12.0/flyway-commandline-10.12.0-linux-x64.tar.gz \
            | tar xz
          # 3) 전체 디렉터리 이동
          mkdir -p ~/.local/share
          mv flyway-10.12.0 ~/.local/share/flyway
          # 4) PATH 등록
          echo "$HOME/.local/share/flyway" >> $GITHUB_PATH

      - name: Verify Flyway installation
        run: |
          flyway -v   # 버전 출력으로 확인

      - name: Validate, Repair & Migrate with Flyway CLI
        run: |
          # 1) 사전 검증(validate)
          if ! flyway \
               -url="$DB_URL" \
               -user="$DB_USER" \
               -password="$DB_PASS" \
               -locations=filesystem:src/main/resources/db/migration \
               validate; then
            echo "Validation failed. Running repair..."
            # 2) 오류 레코드 정리(repair)
            flyway \
              -url="$DB_URL" \
              -user="$DB_USER" \
              -password="$DB_PASS" \
              -locations=filesystem:src/main/resources/db/migration \
              repair
          fi

          # 3) 실제 마이그레이션(migrate)
          flyway \
            -url="$DB_URL" \
            -user="$DB_USER" \
            -password="$DB_PASS" \
            -locations=filesystem:src/main/resources/db/migration \
            migrate

          # 4) 최종 검증(final validate)
          flyway \
            -url="$DB_URL" \
            -user="$DB_USER" \
            -password="$DB_PASS" \
            -locations=filesystem:src/main/resources/db/migration \
            validate

  build-image:
    needs: flyway-migration
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    env:
      TAG: prod-${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier

      - name: Configure Docker auth
        run: |
          gcloud auth configure-docker asia-northeast3-docker.pkg.dev --quiet

      - name: Build & Push Docker Image
        run: |
          docker build \
            -t asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/prod-ongi-spring-repo/backend:$TAG .
          docker push \
            asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/prod-ongi-spring-repo/backend:$TAG

  deploy-backend:
    name: Trigger Cloud Build (PROD)
    needs: build-image
    runs-on: ubuntu-latest
    env:
      TAG: prod-${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier

      - name: Trigger Cloud Build
        run: |
          gcloud builds submit . \
            --config=.gcp/cloudbuild-prod.yaml \
            --substitutions=_IMAGE_TAG=${{ env.TAG }},_TEMPLATE_NAME=ongi-prod-${{ github.run_number }} \
            --service-account=projects/dev-ongi-3-tier/serviceAccounts/github-cd-builder@dev-ongi-3-tier.iam.gserviceaccount.com

  notify-discord:
    name: Notify Discord (전체 단계 결과 - PROD)
    runs-on: ubuntu-latest
    needs:
      - flyway-migration
      - build-image
      - deploy-backend
    if: always()
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      FLYWAY_STATUS: ${{ needs.flyway-migration.result }}
      BUILD_STATUS:  ${{ needs.build-image.result }}
      DEPLOY_STATUS: ${{ needs.deploy-backend.result }}
    steps:
      - name: Construct & send Discord notification for PROD
        run: |
          # 기본: 모두 성공 메시지
          HEADER="✅ PROD 백엔드 배포 완료!"
          COLOR=3066993
          # 하나라도 실패 시
          if [[ "$FLYWAY_STATUS" != "success" || "$BUILD_STATUS" != "success" || "$DEPLOY_STATUS" != "success" ]]; then
            HEADER="❌ PROD 백엔드 배포 실패!"
            COLOR=15158332
          fi
          # jq 로 JSON payload 생성
          PAYLOAD=$(jq -nc \
            --arg content "$HEADER" \
            --arg title   "${{ github.event.pull_request.title }}" \
            --arg url     "${{ github.event.pull_request.html_url }}" \
            --arg fs      "$FLYWAY_STATUS" \
            --arg bs      "$BUILD_STATUS" \
            --arg ds      "$DEPLOY_STATUS" \
            --arg repo    "${{ github.repository }}" \
            --arg actor   "${{ github.actor }}" \
            --argjson color "$COLOR" \
            '{
              content: $content,
              embeds: [{
                title: $title,
                url:   $url,
                fields: [
                  { name: "Flyway Migration",   value: $fs, inline: true },
                  { name: "Build & Push Image", value: $bs, inline: true },
                  { name: "Deploy Backend",     value: $ds, inline: true },
                  { name: "Repository",         value: $repo, inline: true },
                  { name: "Actor",              value: $actor, inline: true }
                ],
                color: $color
              }]
            }'
          )
          # Discord 로 전송
          curl -H "Content-Type: application/json" \
               -X POST \
               -d "$PAYLOAD" \
               "$DISCORD_WEBHOOK_URL"
