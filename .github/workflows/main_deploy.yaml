name: Deploy PROD Backend (Manual Only)

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: '버전 증가 유형 (major, feature, fix)'
        required: true
        type: choice
        options:
          - major
          - feature
          - fix

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git Identity
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

      - name: Read and Bump Version
        id: bump
        env:
          VERSION_TYPE: ${{ github.event.inputs.version_type }}
        run: |
          set -e
          echo "🔎 현재 브랜치 버전 관리 시작"

          # CRLF 제거 및 공백 문자 제거
          VERSION=$(tr -d '\r' < version.txt)
          VERSION="${VERSION//[$'\t\n ']/}"
          echo "현재 버전: [${VERSION}]"

          if ! echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "::error::Invalid version format: $VERSION"
            exit 1
          fi

          IFS='.' read -r MAJOR FEATURE FIX <<< "$VERSION"

          case "$VERSION_TYPE" in
            major)
              ((MAJOR++)); FEATURE=0; FIX=0 ;;
            feature)
              ((FEATURE++)); FIX=0 ;;
            fix)
              ((FIX++)) ;;
            *)
              echo "::error::Invalid version type: $VERSION_TYPE"
              exit 1 ;;
          esac

          NEW_VERSION="${MAJOR}.${FEATURE}.${FIX}"
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          echo "$NEW_VERSION" > version.txt
          echo "✅ 새 버전: $NEW_VERSION"

      - name: Commit and Push version.txt and Git Tag
        run: |
          git add version.txt
          git commit -m "🔖 Bump version to ${{ steps.bump.outputs.new_version }}"
          git tag "v${{ steps.bump.outputs.new_version }}"
          git push origin main --tags

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: temurin

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier

      - name: Configure Docker Auth
        run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev --quiet

      - name: Build & Push Docker Image
        run: |
          docker build -t asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/prod-ongi-spring-repo/backend:${{ steps.bump.outputs.new_version }} .
          docker push asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/prod-ongi-spring-repo/backend:${{ steps.bump.outputs.new_version }}

      - name: Trigger Cloud Build (PROD)
        run: |
          gcloud builds submit . \
            --config=.gcp/cloudbuild-prod.yaml \
            --substitutions=_IMAGE_TAG=${{ steps.bump.outputs.new_version }},_TEMPLATE_NAME=ongi-prod-${{ steps.bump.outputs.new_version }} \
            --service-account=projects/dev-ongi-3-tier/serviceAccounts/github-cd-builder@dev-ongi-3-tier.iam.gserviceaccount.com

      - name: Notify Discord on Success
        if: success()
        env:
          VERSION: ${{ steps.bump.outputs.new_version }}
        run: |
          echo '{
            "content": "**✅ PROD 백엔드 배포 완료!**",
            "embeds": [
              {
                "title": "📦 수동 배포",
                "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "fields": [
                  { "name": "Repository", "value": "${{ github.repository }}", "inline": true },
                  { "name": "Actor", "value": "${{ github.actor }}", "inline": true },
                  { "name": "Image Tag", "value": "${{ env.VERSION }}", "inline": true }
                ],
                "color": 3066993
              }
            ]
          }' | curl -H "Content-Type: application/json" -X POST -d @- ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          echo '{
            "content": "**❌ PROD 백엔드 배포 실패!**",
            "embeds": [
              {
                "title": "📦 수동 배포",
                "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "fields": [
                  { "name": "Repository", "value": "${{ github.repository }}", "inline": true },
                  { "name": "Actor", "value": "${{ github.actor }}", "inline": true }
                ],
                "color": 15158332
              }
            ]
          }' | curl -H "Content-Type: application/json" -X POST -d @- ${{ secrets.DISCORD_WEBHOOK_URL }}