name: Deploy DEV Backend on PR Merge

on:
  pull_request:
    branches:
      - dev
    types:
      - closed

jobs:
  flyway-migration:
    name: "Flyway: Validate · Migrate · Repair"
    runs-on: ubuntu-latest

    env:
      FLYWAY_URL: "jdbc:mysql://127.0.0.1:3306/ongi"
      INSTANCE_CONN: dev-ongi-3-tier:asia-northeast3:dev-ongi-cloudsql

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Fetch Flyway DB Credentials
        id: fetch-secrets
        run: |
          echo "DB_USER=$(gcloud secrets versions access latest --secret=db_user_dev)" >> $GITHUB_ENV
          echo "DB_PASS=$(gcloud secrets versions access latest --secret=db_password_dev)" >> $GITHUB_ENV

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install debug tools
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client net-tools

      - name: Flyway & Proxy 한 번에 실행 (디버깅 강화)
        env:
          INSTANCE_CONN: dev-ongi-3-tier:asia-northeast3:dev-ongi-cloudsql
        run: |
          set -e

          echo "▶ [DEBUG] DB_USER = $DB_USER"
          echo "▶ [DEBUG] FLYWAY_URL = $FLYWAY_URL"

          # 1) v1 바이너리 다운로드
          curl -sSLo cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
          chmod +x cloud_sql_proxy

          # 2) 백그라운드 실행 (verbose)
          nohup ./cloud_sql_proxy \
            --instances=${INSTANCE_CONN}=tcp:3306 \
            --verbose &> proxy.log &

          # 충분히 대기
          sleep 10

          # 3) Proxy 리스닝 확인
          if ! netstat -tnl | grep -q ':3306'; then
            echo "❌ Proxy가 포트 3306을 리스닝하지 않습니다!"
            tail -n 30 proxy.log
            exit 1
          fi
          echo "✅ Proxy 리스닝 확인"

          # 4) mysql 클라이언트로 연결 테스트
          if ! mysql --host=127.0.0.1 --port=3306 \
              --user="$DB_USER" --password="$DB_PASS" \
              -e "SELECT 1" 2>/dev/null; then
            echo "❌ mysql 클라이언트 연결 실패!"
            tail -n 50 proxy.log
            exit 1
          fi
          echo "✅ mysql 클라이언트 연결 성공"

          # 5) Flyway Validate → Migrate → Repair → Retry → Final Validate
          echo "▶ Flyway Validate"
          ./gradlew flywayValidate \
            -Dflyway.url=$FLYWAY_URL \
            -Dflyway.user=$DB_USER \
            -Dflyway.password=$DB_PASS \
            --info

          echo "▶ Flyway Migrate"
          if ./gradlew flywayMigrate \
               -Dflyway.url=$FLYWAY_URL \
               -Dflyway.user=$DB_USER \
               -Dflyway.password=$DB_PASS \
               --info; then
            echo "✅ Migrate 성공"
          else
            echo "⚠️ Migrate 실패 → Repair 후 재시도"
            ./gradlew flywayRepair \
              -Dflyway.url=$FLYWAY_URL \
              -Dflyway.user=$DB_USER \
              -Dflyway.password=$DB_PASS \
              --info

            echo "▶ Flyway Migrate Retry"
            ./gradlew flywayMigrate \
              -Dflyway.url=$FLYWAY_URL \
              -Dflyway.user=$DB_USER \
              -Dflyway.password=$DB_PASS \
              --info
          fi

          echo "▶ Final Flyway Validate"
          ./gradlew flywayValidate \
            -Dflyway.url=$FLYWAY_URL \
            -Dflyway.user=$DB_USER \
            -Dflyway.password=$DB_PASS \
            --info

  build-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: flyway-migration
    env:
      TAG: dev-${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier

      - name: Configure Docker Auth
        run: |
          gcloud auth configure-docker asia-northeast3-docker.pkg.dev --quiet

      - name: Build & Push Docker Image
        run: |
          docker build -t asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/dev-ongi-spring-repo/backend:$TAG .
          docker push asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/dev-ongi-spring-repo/backend:$TAG

  deploy-backend:
    name: Trigger Cloud Build
    runs-on: ubuntu-latest
    needs: build-image

    steps:
      - uses: actions/checkout@v4

      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier

      - name: Trigger Cloud Build
        run: |
          gcloud builds submit . \
            --config=.gcp/cloudbuild-dev.yaml \
            --substitutions=_IMAGE_TAG=${{ env.TAG }},_TEMPLATE_NAME=ongi-dev-${{ github.run_number }} \
            --service-account=projects/dev-ongi-3-tier/serviceAccounts/github-cd-builder@dev-ongi-3-tier.iam.gserviceaccount.com

  notify-discord:
    name: Notify Discord (Success/Failure)
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: ${{ always() }}
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      TAG: dev-${{ github.sha }}

    steps:
      - name: Notify on Success
        if: ${{ needs.deploy-backend.result == 'success' }}
        run: |
          echo '{
            "content": "**✅ DEV 백엔드 배포 완료!**",
            "embeds": [
              {
                "title": "'"${{ github.event.pull_request.title }}"'",
                "url": "'"${{ github.event.pull_request.html_url }}"'",
                "fields": [
                  { "name": "Repository", "value": "'"${{ github.repository }}"'", "inline": true },
                  { "name": "Author",     "value": "'"${{ github.actor }}"'",        "inline": true },
                  { "name": "Image Tag",  "value": "'"${{ env.TAG }}"'",             "inline": true }
                ],
                "color": 3066993
              }
            ]
          }' | curl -H "Content-Type: application/json" -X POST -d @- $DISCORD_WEBHOOK_URL

      - name: Notify on Failure
        if: ${{ needs.deploy-backend.result == 'failure' }}
        run: |
          echo '{
            "content": "**❌ DEV 백엔드 배포 실패!**",
            "embeds": [
              {
                "title": "'"${{ github.event.pull_request.title }}"'",
                "url": "'"${{ github.event.pull_request.html_url }}"'",
                "fields": [
                  { "name": "Repository", "value": "'"${{ github.repository }}"'", "inline": true },
                  { "name": "Author",     "value": "'"${{ github.actor }}"'",        "inline": true }
                ],
                "color": 15158332
              }
            ]
          }' | curl -H "Content-Type: application/json" -X POST -d @- $DISCORD_WEBHOOK_URL