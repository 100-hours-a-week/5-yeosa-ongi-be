name: Deploy DEV Backend on PR Merge

on:
  pull_request:
    branches:
      - dev
    types:
      - closed

jobs:
  flyway-migration:
    runs-on: [self-hosted, linux, x64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier

      - name: Fetch DB credentials
        id: fetch-secrets
        run: |
          # 1) Secret Manager 에서 기본 URL 가져오기
          DB_URL=$(gcloud secrets versions access latest --secret=db_url_dev)
          DB_USER=$(gcloud secrets versions access latest --secret=db_user_dev)
          DB_PASS=$(gcloud secrets versions access latest --secret=db_password_dev)

          # 2) URL 뒤에 allowPublicKeyRetrieval 옵션 추가
          DB_URL="${DB_URL}?allowPublicKeyRetrieval=true&useSSL=false"

          # 3) 환경 변수로 내보내기
          echo "DB_URL=$DB_URL"  >> $GITHUB_ENV
          echo "DB_USER=$DB_USER" >> $GITHUB_ENV
          echo "DB_PASS=$DB_PASS" >> $GITHUB_ENV

      - name: Download & Install Flyway CLI locally
        run: |
          # 1) 기존 설치 제거 (있으면)
          rm -rf ~/.local/share/flyway
          # 2) 압축 해제
          curl -L https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.12.0/flyway-commandline-10.12.0-linux-x64.tar.gz \
            | tar xz
          # 3) 전체 디렉터리 이동
          mkdir -p ~/.local/share
          mv flyway-10.12.0 ~/.local/share/flyway
          # 4) PATH 등록
          echo "$HOME/.local/share/flyway" >> $GITHUB_PATH

      - name: Verify Flyway installation
        run: |
          flyway -v   # 버전 출력으로 확인

      - name: Validate with Flyway CLI
        run: |
          flyway \
            -url="$DB_URL" \
            -user="$DB_USER" \
            -password="$DB_PASS" \
            -locations=filesystem:src/main/resources/db/migration \
            validate

      - name: Migrate with Repair on Failure
        run: |
          if flyway \
            -url="$DB_URL" \
            -user="$DB_USER" \
            -password="$DB_PASS" \
            -locations=filesystem:src/main/resources/db/migration \
            migrate; then
            echo "✅ Flyway migration succeeded"
          else
            echo "⚠️ Migration failed, attempting repair"
            flyway \
              -url="$DB_URL" \
              -user="$DB_USER" \
              -password="$DB_PASS" \
              -locations=filesystem:src/main/resources/db/migration \
              repair
            flyway \
              -url="$DB_URL" \
              -user="$DB_USER" \
              -password="$DB_PASS" \
              -locations=filesystem:src/main/resources/db/migration \
              migrate
          fi

      - name: Final Validate
        run: |
          flyway \
            -url="$DB_URL" \
            -user="$DB_USER" \
            -password="$DB_PASS" \
            -locations=filesystem:src/main/resources/db/migration \
            validate

  build-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: flyway-migration
    env:
      TAG: dev-${{ github.sha }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: temurin
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier
      - name: Configure Docker Auth
        run: gcloud auth configure-docker asia-northeast3-docker.pkg.dev --quiet
      - name: Build & Push Docker Image
        run: |
          docker build -t asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/dev-ongi-spring-repo/backend:$TAG .
          docker push asia-northeast3-docker.pkg.dev/dev-ongi-3-tier/dev-ongi-spring-repo/backend:$TAG

  deploy-backend:
    name: Trigger Cloud Build
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: dev-ongi-3-tier
      - name: Trigger Cloud Build
        run: |
          gcloud builds submit . \
            --config=.gcp/cloudbuild-dev.yaml \
            --substitutions=_IMAGE_TAG=${{ env.TAG }},_TEMPLATE_NAME=ongi-dev-${{ github.run_number }} \
            --service-account=projects/dev-ongi-3-tier/serviceAccounts/github-cd-builder@dev-ongi-3-tier.iam.gserviceaccount.com

  notify-discord:
    name: Notify Discord (Success/Failure)
    needs: deploy-backend
    if: ${{ always() }}
    runs-on: ubuntu-latest
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      TAG: prod-${{ github.sha }}
    steps:
      - name: Notify on Success
        if: ${{ needs.deploy-backend.result == 'success' }}
        run: |
          echo '{
            "content": "**✅ DEV 백엔드 배포 완료!**",
            "embeds": [
              {
                "title": "'"${{ github.event.pull_request.title }}"'",
                "url": "'"${{ github.event.pull_request.html_url }}"'",
                "fields": [
                  { "name": "Repository", "value": "'"${{ github.repository }}"'", "inline": true },
                  { "name": "Actor",      "value": "'"${{ github.actor }}"'",     "inline": true },
                  { "name": "Image Tag",  "value": "'"${{ env.TAG }}"'",          "inline": true }
                ],
                "color": 3066993
              }
            ]
          }' | curl -H "Content-Type: application/json" -X POST -d @- $DISCORD_WEBHOOK_URL

      - name: Notify on Failure
        if: ${{ needs.deploy-backend.result == 'failure' }}
        run: |
          echo '{
            "content": "**❌ DEV 백엔드 배포 실패!**",
            "embeds": [
              {
                "title": "'"${{ github.event.pull_request.title }}"'",
                "url": "'"${{ github.event.pull_request.html_url }}"'",
                "fields": [
                  { "name": "Repository", "value": "'"${{ github.repository }}"'", "inline": true },
                  { "name": "Actor",      "value": "'"${{ github.actor }}"'",     "inline": true }
                ],
                "color": 15158332
              }
            ]
          }' | curl -H "Content-Type: application/json" -X POST -d @- $DISCORD_WEBHOOK_URL
